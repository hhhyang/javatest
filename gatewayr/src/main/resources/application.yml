server:
  port: 8081

spring:
  application:
    name: gatewayr-test
  cloud:
    gateway:
      # 使能基于服务注册中心路由的功能，会创建一个相应的route
      discovery:
        locator:
          enabled: false
      routes:
        - id: webflux-server #路由的ID
          uri: http://localhost:80 #匹配后路由地址
          predicates: # 断言，路径相匹配的进行路由
            - Path=/gateway-test/**
          filters:
            - name: CircuitBreaker
              args:
                name: backendA
                fallbackUri: forward:/handler/hello
                statusCodes:
                  - 500
            - RewritePath=/gateway-test(?<segment>/?.*), $\{segment}


# resilience 配置
resilience4j:
  circuitbreaker:
    instances:
      # circuitbreaker的名字，自定义
      backendA:
        registerHealthIndicator: true
        slidingWindowSize: 5
        minimumNumberOfCalls: 3
        failureRateThreshold: 50
        waitDurationInOpenState: 120s
      backendB:
        registerHealthIndicator: true
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: TIME_BASED
        minimumNumberOfCalls: 20
        waitDurationInOpenState: 50s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
        # recordFailurePredicate: io.github.robwin.exception.RecordFailurePredicate
  retry:
    instances:
      backendA:
        maxRetryAttempts: 3
        waitDuration: 10s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
        #ignoreExceptions:
        #  - io.github.robwin.exception.BusinessException
      backendB:
        maxRetryAttempts: 3
        waitDuration: 10s
        retryExceptions:
          - org.springframework.web.client.HttpServerErrorException
          - java.io.IOException
        #ignoreExceptions:
        #  - io.github.robwin.exception.BusinessException
  bulkhead:
    instances:
      backendA:
        maxConcurrentCalls: 10
      backendB:
        maxWaitDuration: 10ms
        maxConcurrentCalls: 20
  thread-pool-bulkhead:
    instances:
      backendC:
        maxThreadPoolSize: 1
        coreThreadPoolSize: 1
        queueCapacity: 1
  ratelimiter:
    instances:
      backendA:
        limitForPeriod: 3
        limitRefreshPeriod: 10s
        timeoutDuration: 0
        registerHealthIndicator: true
        eventConsumerBufferSize: 100
      backendB:
        limitForPeriod: 6
        limitRefreshPeriod: 500ms
        timeoutDuration: 3s
  timelimiter:
    instances:
      backendA:
        timeoutDuration: 2s
        cancelRunningFuture: true
      backendB:
        timeoutDuration: 1s
        cancelRunningFuture: true
